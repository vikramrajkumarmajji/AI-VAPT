import React, { useState } from "react";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Button } from "@/components/ui/button";
import {
  AlertCircle,
  AlertTriangle,
  Info,
  CheckCircle,
  BarChart2,
  Shield,
  FileText,
  RefreshCw,
  TrendingUp,
  Database,
  Network,
  Globe,
  Lock,
  Zap,
  Activity,
  Eye,
  Target,
  Server,
  Brain,
  Cpu,
  Sparkles,
  Bot,
} from "lucide-react";
import VulnerabilityDetail from "./VulnerabilityDetail";

interface Vulnerability {
  id: string;
  name: string;
  title: string;
  severity: "critical" | "high" | "medium" | "low" | "info";
  exploitPotential: "confirmed" | "potential" | "unlikely";
  category: string;
  owaspCategory: string;
  description: string;
  impact: string;
  remediation: string;
  technicalDetails: string;
  references: { title: string; url: string }[];
  cvss?: number;
  cve?: string;
  discoveredAt: string;
  status: "open" | "in-progress" | "resolved" | "false-positive";
  affectedComponents: string[];
  proofOfConcept?: string;
  pocScreenshot?: string;
  endpointUrl?: string;
  exploitComplexity?: string;
  riskScore?: number;
  businessImpact?: string;
  attackVector?: string;
  dataClassification?: string;
}

interface VulnerabilityDashboardProps {
  scanInProgress?: boolean;
  scanProgress?: number;
  vulnerabilities?: Vulnerability[];
  onRetest?: () => void;
  onGenerateReport?: () => void;
  scanMetadata?: {
    targetType: string;
    targetValue: string;
    profile: string;
    confidence: number;
    timestamp: string;
  };
  hasPerformedScan?: boolean;
}

const VulnerabilityDashboard: React.FC<VulnerabilityDashboardProps> = ({
  scanInProgress = false,
  scanProgress = 0,
  vulnerabilities = [],
  onRetest = () => console.log("Retest initiated"),
  onGenerateReport = () => console.log("Report generation initiated"),
  scanMetadata,
  hasPerformedScan = false,
}) => {
  const [selectedVulnerability, setSelectedVulnerability] =
    useState<Vulnerability | null>(null);
  const [viewMode, setViewMode] = useState<"severity" | "exploit" | "owasp">(
    "severity",
  );

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case "critical":
        return <AlertCircle className="h-5 w-5 text-red-500" />;
      case "high":
        return <AlertTriangle className="h-5 w-5 text-orange-500" />;
      case "medium":
        return <AlertTriangle className="h-5 w-5 text-yellow-500" />;
      case "low":
        return <Info className="h-5 w-5 text-blue-500" />;
      default:
        return <Info className="h-5 w-5 text-gray-500" />;
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical":
        return "bg-red-500";
      case "high":
        return "bg-orange-500";
      case "medium":
        return "bg-yellow-500";
      case "low":
        return "bg-blue-500";
      default:
        return "bg-gray-500";
    }
  };

  const getExploitBadgeVariant = (exploitPotential: string) => {
    switch (exploitPotential) {
      case "confirmed":
        return "destructive";
      case "potential":
        return "secondary";
      default:
        return "outline";
    }
  };

  const getSeverityCounts = () => {
    const counts = { critical: 0, high: 0, medium: 0, low: 0, info: 0 };
    if (vulnerabilities && vulnerabilities.length > 0) {
      vulnerabilities.forEach((vuln) => {
        counts[vuln.severity]++;
      });
    }
    return counts;
  };

  const severityCounts = getSeverityCounts();

  const getFilteredVulnerabilities = () => {
    if (!vulnerabilities || vulnerabilities.length === 0) {
      return [];
    }

    if (viewMode === "severity") {
      return [...vulnerabilities].sort((a, b) => {
        const severityOrder = {
          critical: 0,
          high: 1,
          medium: 2,
          low: 3,
          info: 4,
        };
        return severityOrder[a.severity] - severityOrder[b.severity];
      });
    } else if (viewMode === "exploit") {
      return [...vulnerabilities].sort((a, b) => {
        const exploitOrder = { confirmed: 0, potential: 1, unlikely: 2 };
        return (
          exploitOrder[a.exploitPotential] - exploitOrder[b.exploitPotential]
        );
      });
    } else {
      // Group by OWASP category
      return [...vulnerabilities].sort((a, b) =>
        a.category.localeCompare(b.category),
      );
    }
  };

  const handleVulnerabilityClick = (vulnerability: Vulnerability) => {
    setSelectedVulnerability(vulnerability);
  };

  const handleCloseDetail = () => {
    setSelectedVulnerability(null);
  };

  return (
    <div className="w-full h-full bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950 text-foreground relative overflow-hidden">
      <div className="absolute inset-0 bg-[radial-gradient(ellipse_at_top,_var(--tw-gradient-stops))] from-emerald-900/20 via-transparent to-cyan-900/20 pointer-events-none" />
      {scanInProgress ? (
        <Card className="mb-6 border-emerald-500/30 relative overflow-hidden bg-slate-900/50 backdrop-blur-sm">
          <div className="absolute inset-0 bg-gradient-to-r from-emerald-500/10 to-cyan-500/10" />
          <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-emerald-500 to-cyan-500 animate-pulse" />
          <CardHeader className="relative z-10">
            <CardTitle className="flex items-center text-emerald-600 dark:text-emerald-400 font-bold">
              <Activity className="mr-3 h-6 w-6 animate-spin" />
              Elite Scan in Progress
            </CardTitle>
            <CardDescription className="text-slate-600 dark:text-slate-300">
              Advanced AI-powered security assessment underway
            </CardDescription>
          </CardHeader>
          <CardContent className="relative z-10">
            <div className="space-y-4">
              <div className="flex justify-between text-sm font-medium">
                <span className="text-emerald-700 dark:text-emerald-300">
                  Scan Progress
                </span>
                <span className="text-cyan-700 dark:text-cyan-300 font-bold">
                  {scanProgress}%
                </span>
              </div>
              <div className="relative">
                <Progress
                  value={scanProgress}
                  className="h-3 bg-slate-800 border border-slate-700"
                />
                <div
                  className="absolute inset-0 bg-gradient-to-r from-emerald-500 to-cyan-500 rounded-full opacity-75"
                  style={{ width: `${scanProgress}%` }}
                />
              </div>
              <div className="grid grid-cols-4 gap-4 mt-4">
                <div className="text-center p-3 bg-slate-800/30 backdrop-blur-sm rounded-lg">
                  <Brain className="h-6 w-6 mx-auto mb-2 text-emerald-400" />
                  <p className="text-xs text-slate-600 dark:text-slate-300">
                    AI Analysis
                  </p>
                </div>
                <div className="text-center p-3 bg-slate-800/30 backdrop-blur-sm rounded-lg">
                  <Sparkles className="h-6 w-6 mx-auto mb-2 text-cyan-400" />
                  <p className="text-xs text-slate-600 dark:text-slate-300">
                    ML Detection
                  </p>
                </div>
                <div className="text-center p-3 bg-slate-800/30 backdrop-blur-sm rounded-lg">
                  <Cpu className="h-6 w-6 mx-auto mb-2 text-purple-400" />
                  <p className="text-xs text-slate-600 dark:text-slate-300">
                    Neural Scan
                  </p>
                </div>
                <div className="text-center p-3 bg-slate-800/30 backdrop-blur-sm rounded-lg">
                  <Bot className="h-6 w-6 mx-auto mb-2 text-amber-400" />
                  <p className="text-xs text-slate-600 dark:text-slate-300">
                    AI Predict
                  </p>
                </div>
              </div>
              <p className="text-sm text-slate-600 dark:text-slate-400 mt-4 text-center">
                🤖 AI-powered analysis with neural network precision...
              </p>
            </div>
          </CardContent>
        </Card>
      ) : null}

      {selectedVulnerability ? (
        <VulnerabilityDetail vulnerability={selectedVulnerability} />
      ) : !hasPerformedScan ? (
        <div className="flex flex-col items-center justify-center h-96 gap-4">
          <Shield className="h-16 w-16 text-muted-foreground" />
          <div className="text-center">
            <h3 className="text-xl font-semibold mb-2">
              No Scan Results Available
            </h3>
            <p className="text-muted-foreground mb-4">
              Please specify a target and initiate a security scan to view
              vulnerability assessment results.
            </p>
            <p className="text-sm text-muted-foreground">
              Use the Target Specification panel on the left to configure and
              start your security assessment.
            </p>
          </div>
        </div>
      ) : (
        <div className="space-y-6">
          <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
            <div>
              <h2 className="text-2xl font-bold">
                Advanced Vulnerability Dashboard
              </h2>
              <div className="flex flex-col md:flex-row md:items-center gap-2 mt-1">
                <p className="text-muted-foreground">
                  Interactive security assessment results
                </p>
                {scanMetadata && (
                  <div className="flex items-center gap-4 text-sm">
                    <span className="text-muted-foreground">
                      | Target:{" "}
                      <span className="text-foreground font-medium">
                        {scanMetadata.targetValue}
                      </span>
                    </span>
                    <span className="text-muted-foreground">
                      Profile:{" "}
                      <span className="text-foreground font-medium capitalize">
                        {scanMetadata.profile}
                      </span>
                    </span>
                    <span className="text-muted-foreground">
                      Confidence:{" "}
                      <span className="text-emerald-500 font-medium">
                        {scanMetadata.confidence}%
                      </span>
                    </span>
                  </div>
                )}
              </div>
            </div>
            <div className="flex gap-2">
              <Button variant="outline" onClick={onRetest}>
                <RefreshCw className="mr-2 h-4 w-4" />
                Retest
              </Button>
              <Button onClick={onGenerateReport}>
                <FileText className="mr-2 h-4 w-4" />
                Generate Report
              </Button>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-6 gap-4">
            <Card
              className={`bg-gradient-to-br from-red-900/30 to-red-800/20 border-red-500/40 relative overflow-hidden ${severityCounts.critical > 0 ? "critical-glow" : ""}`}
            >
              <div className="absolute inset-0 bg-gradient-to-br from-red-500/10 to-transparent" />
              <CardHeader className="pb-2 relative z-10">
                <CardTitle className="text-sm font-medium text-red-300 flex items-center">
                  <AlertCircle className="mr-2 h-4 w-4" />
                  Critical
                </CardTitle>
              </CardHeader>
              <CardContent className="relative z-10">
                <div className="flex items-center justify-between">
                  <div className="text-4xl font-bold text-red-600 dark:text-red-400">
                    {severityCounts.critical}
                  </div>
                  <div className="relative">
                    <AlertCircle className="h-10 w-10 text-red-500" />
                    {severityCounts.critical > 0 && (
                      <div className="absolute inset-0 h-10 w-10 bg-red-500/30 rounded-full animate-ping" />
                    )}
                  </div>
                </div>
                <p className="text-xs text-red-300/80 mt-2 font-medium">
                  🚨 Immediate action required
                </p>
              </CardContent>
            </Card>
            <Card
              className={`bg-gradient-to-br from-orange-900/30 to-orange-800/20 border-orange-500/40 relative overflow-hidden ${severityCounts.high > 0 ? "high-glow" : ""}`}
            >
              <div className="absolute inset-0 bg-gradient-to-br from-orange-500/10 to-transparent" />
              <CardHeader className="pb-2 relative z-10">
                <CardTitle className="text-sm font-medium text-orange-300 flex items-center">
                  <AlertTriangle className="mr-2 h-4 w-4" />
                  High
                </CardTitle>
              </CardHeader>
              <CardContent className="relative z-10">
                <div className="flex items-center justify-between">
                  <div className="text-4xl font-bold text-orange-600 dark:text-orange-400">
                    {severityCounts.high}
                  </div>
                  <div className="relative">
                    <AlertTriangle className="h-10 w-10 text-orange-500" />
                    {severityCounts.high > 0 && (
                      <div className="absolute inset-0 h-10 w-10 bg-orange-500/30 rounded-full pulse-ring" />
                    )}
                  </div>
                </div>
                <p className="text-xs text-orange-300/80 mt-2 font-medium">
                  ⚡ High priority fixes
                </p>
              </CardContent>
            </Card>
            <Card
              className={`bg-gradient-to-br from-yellow-900/30 to-yellow-800/20 border-yellow-500/40 relative overflow-hidden ${severityCounts.medium > 0 ? "medium-glow" : ""}`}
            >
              <div className="absolute inset-0 bg-gradient-to-br from-yellow-500/10 to-transparent" />
              <CardHeader className="pb-2 relative z-10">
                <CardTitle className="text-sm font-medium text-yellow-300 flex items-center">
                  <AlertTriangle className="mr-2 h-4 w-4" />
                  Medium
                </CardTitle>
              </CardHeader>
              <CardContent className="relative z-10">
                <div className="flex items-center justify-between">
                  <div className="text-4xl font-bold text-yellow-600 dark:text-yellow-400">
                    {severityCounts.medium}
                  </div>
                  <div className="relative">
                    <AlertTriangle className="h-10 w-10 text-yellow-500" />
                    {severityCounts.medium > 0 && (
                      <div className="absolute inset-0 h-10 w-10 bg-yellow-500/30 rounded-full pulse-ring" />
                    )}
                  </div>
                </div>
                <p className="text-xs text-yellow-300/80 mt-2 font-medium">
                  ⚠️ Moderate risk level
                </p>
              </CardContent>
            </Card>
            <Card className="bg-gradient-to-br from-blue-900/30 to-blue-800/20 border-blue-500/40 relative overflow-hidden">
              <div className="absolute inset-0 bg-gradient-to-br from-blue-500/10 to-transparent" />
              <CardHeader className="pb-2 relative z-10">
                <CardTitle className="text-sm font-medium text-blue-300 flex items-center">
                  <Info className="mr-2 h-4 w-4" />
                  Low
                </CardTitle>
              </CardHeader>
              <CardContent className="relative z-10">
                <div className="flex items-center justify-between">
                  <div className="text-4xl font-bold text-blue-600 dark:text-blue-400">
                    {severityCounts.low + severityCounts.info}
                  </div>
                  <Info className="h-10 w-10 text-blue-500" />
                </div>
                <p className="text-xs text-blue-300/80 mt-2 font-medium">
                  ℹ️ Low impact findings
                </p>
              </CardContent>
            </Card>
            <Card className="bg-gradient-to-br from-emerald-900/30 to-emerald-800/20 border-emerald-500/40 relative overflow-hidden">
              <div className="absolute inset-0 bg-gradient-to-br from-emerald-500/10 to-transparent" />
              <CardHeader className="pb-2 relative z-10">
                <CardTitle className="text-sm font-medium text-emerald-300 flex items-center">
                  <TrendingUp className="mr-2 h-4 w-4" />
                  Risk Score
                </CardTitle>
              </CardHeader>
              <CardContent className="relative z-10">
                <div className="flex items-center justify-between">
                  <div className="text-4xl font-bold text-emerald-600 dark:text-emerald-400">
                    {Math.round(
                      (severityCounts.critical * 10 +
                        severityCounts.high * 7 +
                        severityCounts.medium * 4 +
                        severityCounts.low * 2) /
                        Math.max(1, vulnerabilities.length),
                    )}
                  </div>
                  <div className="relative">
                    <TrendingUp className="h-10 w-10 text-emerald-500 animate-pulse" />
                    <div className="absolute inset-0 h-10 w-10 bg-emerald-500/20 rounded-full pulse-ring" />
                  </div>
                </div>
                <p className="text-xs text-emerald-300/80 mt-2 font-medium">
                  🤖 AI-powered assessment
                </p>
              </CardContent>
            </Card>
            <Card className="bg-gradient-to-br from-purple-900/30 to-purple-800/20 border-purple-500/40 relative overflow-hidden">
              <div className="absolute inset-0 bg-gradient-to-br from-purple-500/10 to-transparent" />
              <CardHeader className="pb-2 relative z-10">
                <CardTitle className="text-sm font-medium text-purple-300 flex items-center">
                  <Brain className="mr-2 h-4 w-4" />
                  AI Confidence
                </CardTitle>
              </CardHeader>
              <CardContent className="relative z-10">
                <div className="flex items-center justify-between">
                  <div className="text-4xl font-bold text-purple-600 dark:text-purple-400">
                    {scanMetadata?.confidence || 95}%
                  </div>
                  <div className="relative">
                    <Brain className="h-10 w-10 text-purple-500 animate-pulse" />
                    <div className="absolute inset-0 h-10 w-10 bg-purple-500/20 rounded-full pulse-ring" />
                  </div>
                </div>
                <p className="text-xs text-purple-300/80 mt-2 font-medium">
                  🤖 AI analysis accuracy
                </p>
              </CardContent>
            </Card>
          </div>

          <Tabs
            defaultValue="severity"
            className="w-full"
            onValueChange={(value) => setViewMode(value as any)}
          >
            <TabsList className="grid grid-cols-6 mb-4">
              <TabsTrigger value="severity">
                <AlertCircle className="mr-2 h-4 w-4" />
                By Severity
              </TabsTrigger>
              <TabsTrigger value="exploit">
                <Shield className="mr-2 h-4 w-4" />
                By Exploit
              </TabsTrigger>
              <TabsTrigger value="owasp">
                <BarChart2 className="mr-2 h-4 w-4" />
                OWASP Top 10
              </TabsTrigger>
              <TabsTrigger value="business">
                <TrendingUp className="mr-2 h-4 w-4" />
                Business Impact
              </TabsTrigger>
              <TabsTrigger value="technical">
                <Server className="mr-2 h-4 w-4" />
                Technical View
              </TabsTrigger>
              <TabsTrigger value="ai">
                <Brain className="mr-2 h-4 w-4" />
                AI Insights
              </TabsTrigger>
            </TabsList>

            <TabsContent value="severity" className="space-y-4">
              {getFilteredVulnerabilities().length > 0 ? (
                getFilteredVulnerabilities().map((vuln) => (
                  <Card
                    key={vuln.id}
                    className={`cursor-pointer transition-all duration-300 border-l-4 hover:scale-[1.02] hover:shadow-2xl bg-slate-800/30 backdrop-blur-sm ${
                      vuln.severity === "critical"
                        ? "border-l-red-500 hover:border-l-red-400 hover:bg-red-900/20"
                        : vuln.severity === "high"
                          ? "border-l-orange-500 hover:border-l-orange-400 hover:bg-orange-900/20"
                          : vuln.severity === "medium"
                            ? "border-l-yellow-500 hover:border-l-yellow-400 hover:bg-yellow-900/20"
                            : "border-l-blue-500 hover:border-l-blue-400 hover:bg-blue-900/20"
                    }`}
                    onClick={() => handleVulnerabilityClick(vuln)}
                  >
                    <CardHeader className="pb-2">
                      <div className="flex justify-between items-start">
                        <div className="flex items-center gap-2">
                          {getSeverityIcon(vuln.severity)}
                          <div>
                            <CardTitle className="text-base">
                              {vuln.title}
                            </CardTitle>
                            <div className="flex items-center gap-2 mt-1">
                              <Badge variant="outline" className="text-xs">
                                {vuln.owaspCategory || vuln.category}
                              </Badge>
                              {vuln.cvss && (
                                <Badge variant="secondary" className="text-xs">
                                  CVSS: {vuln.cvss}
                                </Badge>
                              )}
                            </div>
                          </div>
                        </div>
                        <div className="flex flex-col gap-1">
                          <Badge
                            variant={getExploitBadgeVariant(
                              vuln.exploitPotential,
                            )}
                            className="text-xs"
                          >
                            {vuln.exploitPotential}
                          </Badge>
                          {vuln.riskScore && (
                            <Badge variant="outline" className="text-xs">
                              Risk: {vuln.riskScore}/10
                            </Badge>
                          )}
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <p className="text-sm line-clamp-2 mb-2">
                        {vuln.description}
                      </p>
                      {vuln.endpointUrl && (
                        <div className="mb-2 p-2 bg-red-900/10 border border-red-700/30 rounded">
                          <div className="text-xs text-red-300 mb-1">
                            🎯 Vulnerable Endpoint:
                          </div>
                          <code className="text-xs text-red-200 font-mono break-all">
                            {vuln.endpointUrl}
                          </code>
                        </div>
                      )}
                      <div className="flex items-center justify-between text-xs text-muted-foreground">
                        <span>
                          Components: {vuln.affectedComponents.length}
                          {vuln.pocScreenshot && " | 📸 PoC Available"}
                        </span>
                        <span>
                          {new Date(vuln.discoveredAt).toLocaleDateString()}
                        </span>
                      </div>
                    </CardContent>
                  </Card>
                ))
              ) : (
                <div className="flex flex-col items-center justify-center h-64 gap-4">
                  <CheckCircle className="h-12 w-12 text-green-500" />
                  <div className="text-center">
                    <h3 className="text-lg font-semibold mb-2">
                      No Vulnerabilities Found
                    </h3>
                    <p className="text-muted-foreground">
                      The security scan completed successfully with no
                      vulnerabilities detected.
                    </p>
                  </div>
                </div>
              )}
            </TabsContent>

            <TabsContent value="exploit" className="space-y-4">
              {getFilteredVulnerabilities().length > 0 ? (
                getFilteredVulnerabilities().map((vuln) => (
                  <Card
                    key={vuln.id}
                    className="cursor-pointer hover:bg-accent/50 transition-colors"
                    onClick={() => handleVulnerabilityClick(vuln)}
                  >
                    <CardHeader className="pb-2">
                      <div className="flex justify-between items-start">
                        <div className="flex items-center gap-2">
                          {getSeverityIcon(vuln.severity)}
                          <CardTitle>{vuln.title}</CardTitle>
                        </div>
                        <Badge
                          className={`${getSeverityColor(vuln.severity)} text-white`}
                        >
                          {vuln.severity}
                        </Badge>
                      </div>
                      <CardDescription>{vuln.category}</CardDescription>
                    </CardHeader>
                    <CardContent>
                      <p className="text-sm line-clamp-2">{vuln.description}</p>
                    </CardContent>
                  </Card>
                ))
              ) : (
                <div className="flex flex-col items-center justify-center h-64 gap-4">
                  <CheckCircle className="h-12 w-12 text-green-500" />
                  <div className="text-center">
                    <h3 className="text-lg font-semibold mb-2">
                      No Vulnerabilities Found
                    </h3>
                    <p className="text-muted-foreground">
                      The security scan completed successfully with no
                      vulnerabilities detected.
                    </p>
                  </div>
                </div>
              )}
            </TabsContent>

            <TabsContent value="owasp" className="space-y-4">
              {getFilteredVulnerabilities().length > 0 ? (
                getFilteredVulnerabilities().map((vuln) => (
                  <Card
                    key={vuln.id}
                    className="cursor-pointer hover:bg-accent/50 transition-colors"
                    onClick={() => handleVulnerabilityClick(vuln)}
                  >
                    <CardHeader className="pb-2">
                      <div className="flex justify-between items-start">
                        <div className="flex items-center gap-2">
                          {getSeverityIcon(vuln.severity)}
                          <CardTitle>{vuln.title}</CardTitle>
                        </div>
                        <div className="flex gap-2">
                          <Badge
                            className={`${getSeverityColor(vuln.severity)} text-white`}
                          >
                            {vuln.severity}
                          </Badge>
                          <Badge
                            variant={getExploitBadgeVariant(
                              vuln.exploitPotential,
                            )}
                          >
                            {vuln.exploitPotential}
                          </Badge>
                        </div>
                      </div>
                      <CardDescription>{vuln.category}</CardDescription>
                    </CardHeader>
                    <CardContent>
                      <p className="text-sm line-clamp-2">{vuln.description}</p>
                    </CardContent>
                  </Card>
                ))
              ) : (
                <div className="flex flex-col items-center justify-center h-64 gap-4">
                  <CheckCircle className="h-12 w-12 text-green-500" />
                  <div className="text-center">
                    <h3 className="text-lg font-semibold mb-2">
                      No Vulnerabilities Found
                    </h3>
                    <p className="text-muted-foreground">
                      The security scan completed successfully with no
                      vulnerabilities detected.
                    </p>
                  </div>
                </div>
              )}
            </TabsContent>

            <TabsContent value="business" className="space-y-4">
              {getFilteredVulnerabilities().length > 0 ? (
                <div className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                    <Card className="bg-gradient-to-br from-red-900/20 to-red-800/10 border-red-800/30">
                      <CardHeader className="pb-2">
                        <CardTitle className="text-sm font-medium text-red-300">
                          Financial Impact
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="text-2xl font-bold text-red-400">
                          $
                          {(
                            (severityCounts.critical * 50000 +
                              severityCounts.high * 25000 +
                              severityCounts.medium * 10000 +
                              severityCounts.low * 2000) /
                            1000
                          ).toFixed(0)}
                          K
                        </div>
                        <p className="text-xs text-red-300/70 mt-1">
                          Estimated exposure
                        </p>
                      </CardContent>
                    </Card>
                    <Card className="bg-gradient-to-br from-orange-900/20 to-orange-800/10 border-orange-800/30">
                      <CardHeader className="pb-2">
                        <CardTitle className="text-sm font-medium text-orange-300">
                          Compliance Risk
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="text-2xl font-bold text-orange-400">
                          {Math.round(
                            ((severityCounts.critical + severityCounts.high) /
                              Math.max(1, vulnerabilities.length)) *
                              100,
                          )}
                          %
                        </div>
                        <p className="text-xs text-orange-300/70 mt-1">
                          Regulatory exposure
                        </p>
                      </CardContent>
                    </Card>
                    <Card className="bg-gradient-to-br from-blue-900/20 to-blue-800/10 border-blue-800/30">
                      <CardHeader className="pb-2">
                        <CardTitle className="text-sm font-medium text-blue-300">
                          Remediation Time
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="text-2xl font-bold text-blue-400">
                          {severityCounts.critical * 5 +
                            severityCounts.high * 3 +
                            severityCounts.medium * 2 +
                            severityCounts.low * 1}
                          d
                        </div>
                        <p className="text-xs text-blue-300/70 mt-1">
                          Estimated effort
                        </p>
                      </CardContent>
                    </Card>
                  </div>
                  {getFilteredVulnerabilities().map((vuln) => (
                    <Card
                      key={vuln.id}
                      className="cursor-pointer hover:bg-accent/50 transition-colors"
                      onClick={() => handleVulnerabilityClick(vuln)}
                    >
                      <CardHeader className="pb-2">
                        <div className="flex justify-between items-start">
                          <div className="flex items-center gap-2">
                            {getSeverityIcon(vuln.severity)}
                            <div>
                              <CardTitle className="text-base">
                                {vuln.title}
                              </CardTitle>
                              <CardDescription className="mt-1">
                                Business Impact:{" "}
                                {vuln.businessImpact ||
                                  "Data breach, service disruption, compliance violation"}
                              </CardDescription>
                            </div>
                          </div>
                          <div className="text-right">
                            <Badge
                              className={`${getSeverityColor(vuln.severity)} text-white mb-1`}
                            >
                              $
                              {vuln.severity === "critical"
                                ? "50K"
                                : vuln.severity === "high"
                                  ? "25K"
                                  : vuln.severity === "medium"
                                    ? "10K"
                                    : "2K"}
                            </Badge>
                            <p className="text-xs text-muted-foreground">
                              Est. cost
                            </p>
                          </div>
                        </div>
                      </CardHeader>
                      <CardContent>
                        <div className="grid grid-cols-3 gap-4 text-sm">
                          <div>
                            <span className="text-muted-foreground">
                              Data Classification:
                            </span>
                            <p className="font-medium">
                              {vuln.dataClassification || "Sensitive"}
                            </p>
                          </div>
                          <div>
                            <span className="text-muted-foreground">
                              Attack Vector:
                            </span>
                            <p className="font-medium">
                              {vuln.attackVector || "Network"}
                            </p>
                          </div>
                          <div>
                            <span className="text-muted-foreground">
                              Compliance:
                            </span>
                            <p className="font-medium text-red-400">
                              GDPR, SOX, PCI-DSS
                            </p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              ) : (
                <div className="flex flex-col items-center justify-center h-64 gap-4">
                  <TrendingUp className="h-12 w-12 text-green-500" />
                  <div className="text-center">
                    <h3 className="text-lg font-semibold mb-2">
                      Low Business Risk
                    </h3>
                    <p className="text-muted-foreground">
                      No significant business impact vulnerabilities detected.
                    </p>
                  </div>
                </div>
              )}
            </TabsContent>

            <TabsContent value="technical" className="space-y-4">
              {getFilteredVulnerabilities().length > 0 ? (
                <div className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                    <Card className="bg-gradient-to-br from-purple-900/20 to-purple-800/10 border-purple-800/30">
                      <CardHeader className="pb-2">
                        <CardTitle className="text-sm font-medium text-purple-300">
                          Attack Surface
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="flex items-center justify-between">
                          <div className="text-2xl font-bold text-purple-400">
                            {
                              vulnerabilities.filter(
                                (v) => v.attackVector === "Network",
                              ).length
                            }
                          </div>
                          <Network className="h-6 w-6 text-purple-500" />
                        </div>
                        <p className="text-xs text-purple-300/70 mt-1">
                          Network exposed
                        </p>
                      </CardContent>
                    </Card>
                    <Card className="bg-gradient-to-br from-cyan-900/20 to-cyan-800/10 border-cyan-800/30">
                      <CardHeader className="pb-2">
                        <CardTitle className="text-sm font-medium text-cyan-300">
                          Web Apps
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="flex items-center justify-between">
                          <div className="text-2xl font-bold text-cyan-400">
                            {
                              vulnerabilities.filter(
                                (v) =>
                                  v.category === "web" ||
                                  v.owaspCategory?.includes("Injection"),
                              ).length
                            }
                          </div>
                          <Globe className="h-6 w-6 text-cyan-500" />
                        </div>
                        <p className="text-xs text-cyan-300/70 mt-1">
                          Web vulnerabilities
                        </p>
                      </CardContent>
                    </Card>
                    <Card className="bg-gradient-to-br from-green-900/20 to-green-800/10 border-green-800/30">
                      <CardHeader className="pb-2">
                        <CardTitle className="text-sm font-medium text-green-300">
                          Infrastructure
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="flex items-center justify-between">
                          <div className="text-2xl font-bold text-green-400">
                            {
                              vulnerabilities.filter(
                                (v) => v.category === "infrastructure",
                              ).length
                            }
                          </div>
                          <Server className="h-6 w-6 text-green-500" />
                        </div>
                        <p className="text-xs text-green-300/70 mt-1">
                          System level
                        </p>
                      </CardContent>
                    </Card>
                    <Card className="bg-gradient-to-br from-amber-900/20 to-amber-800/10 border-amber-800/30">
                      <CardHeader className="pb-2">
                        <CardTitle className="text-sm font-medium text-amber-300">
                          Crypto Issues
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="flex items-center justify-between">
                          <div className="text-2xl font-bold text-amber-400">
                            {
                              vulnerabilities.filter((v) =>
                                v.owaspCategory?.includes("Cryptographic"),
                              ).length
                            }
                          </div>
                          <Lock className="h-6 w-6 text-amber-500" />
                        </div>
                        <p className="text-xs text-amber-300/70 mt-1">
                          Encryption flaws
                        </p>
                      </CardContent>
                    </Card>
                  </div>
                  {getFilteredVulnerabilities().map((vuln) => (
                    <Card
                      key={vuln.id}
                      className="cursor-pointer hover:bg-accent/50 transition-colors border-l-4"
                      style={{
                        borderLeftColor:
                          vuln.severity === "critical"
                            ? "#ef4444"
                            : vuln.severity === "high"
                              ? "#f97316"
                              : vuln.severity === "medium"
                                ? "#eab308"
                                : "#3b82f6",
                      }}
                      onClick={() => handleVulnerabilityClick(vuln)}
                    >
                      <CardHeader className="pb-2">
                        <div className="flex justify-between items-start">
                          <div className="flex items-center gap-2">
                            {getSeverityIcon(vuln.severity)}
                            <div>
                              <CardTitle className="text-base">
                                {vuln.title}
                              </CardTitle>
                              <div className="flex items-center gap-2 mt-1">
                                <Badge variant="outline" className="text-xs">
                                  {vuln.exploitComplexity || "Medium"}{" "}
                                  Complexity
                                </Badge>
                                <Badge variant="secondary" className="text-xs">
                                  {vuln.attackVector || "Network"}
                                </Badge>
                              </div>
                            </div>
                          </div>
                          <div className="text-right">
                            <Badge
                              className={`${getSeverityColor(vuln.severity)} text-white mb-1`}
                            >
                              {vuln.severity}
                            </Badge>
                            {vuln.cve && (
                              <p className="text-xs text-muted-foreground">
                                {vuln.cve}
                              </p>
                            )}
                          </div>
                        </div>
                      </CardHeader>
                      <CardContent>
                        <div className="space-y-2">
                          <p className="text-sm line-clamp-2">
                            {vuln.technicalDetails}
                          </p>
                          <div className="flex items-center justify-between text-xs text-muted-foreground">
                            <span>
                              Affected: {vuln.affectedComponents.join(", ")}
                            </span>
                            <span>
                              Discovered:{" "}
                              {new Date(vuln.discoveredAt).toLocaleDateString()}
                            </span>
                          </div>
                          {vuln.pocScreenshot && (
                            <div className="text-xs mt-1">
                              <span className="text-muted-foreground">
                                📸 Proof of Concept Available
                              </span>
                            </div>
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              ) : (
                <div className="flex flex-col items-center justify-center h-64 gap-4">
                  <Server className="h-12 w-12 text-green-500" />
                  <div className="text-center">
                    <h3 className="text-lg font-semibold mb-2">
                      Clean Technical Assessment
                    </h3>
                    <p className="text-muted-foreground">
                      No technical vulnerabilities detected in the
                      infrastructure.
                    </p>
                  </div>
                </div>
              )}
            </TabsContent>

            <TabsContent value="ai" className="space-y-4">
              {getFilteredVulnerabilities().length > 0 ? (
                <div className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                    <Card className="bg-gradient-to-br from-blue-900/20 to-blue-800/10 border-blue-800/30">
                      <CardHeader className="pb-2">
                        <CardTitle className="text-sm font-medium text-blue-300">
                          AI Threat Score
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="flex items-center justify-between">
                          <div className="text-2xl font-bold text-blue-400">
                            {Math.round(
                              (severityCounts.critical * 9.5 +
                                severityCounts.high * 7.8 +
                                severityCounts.medium * 5.2 +
                                severityCounts.low * 2.1) /
                                Math.max(1, vulnerabilities.length),
                            )}
                            /10
                          </div>
                          <Brain className="h-6 w-6 text-blue-500" />
                        </div>
                        <p className="text-xs text-blue-300/70 mt-1">
                          Neural network assessment
                        </p>
                      </CardContent>
                    </Card>
                    <Card className="bg-gradient-to-br from-purple-900/20 to-purple-800/10 border-purple-800/30">
                      <CardHeader className="pb-2">
                        <CardTitle className="text-sm font-medium text-purple-300">
                          ML Predictions
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="flex items-center justify-between">
                          <div className="text-2xl font-bold text-purple-400">
                            {
                              vulnerabilities.filter(
                                (v) => v.exploitPotential === "confirmed",
                              ).length
                            }
                          </div>
                          <Sparkles className="h-6 w-6 text-purple-500" />
                        </div>
                        <p className="text-xs text-purple-300/70 mt-1">
                          Exploit predictions
                        </p>
                      </CardContent>
                    </Card>
                    <Card className="bg-gradient-to-br from-emerald-900/20 to-emerald-800/10 border-emerald-800/30">
                      <CardHeader className="pb-2">
                        <CardTitle className="text-sm font-medium text-emerald-300">
                          AI Accuracy
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="flex items-center justify-between">
                          <div className="text-2xl font-bold text-emerald-400">
                            {scanMetadata?.confidence || 95}%
                          </div>
                          <Cpu className="h-6 w-6 text-emerald-500" />
                        </div>
                        <p className="text-xs text-emerald-300/70 mt-1">
                          Deep learning confidence
                        </p>
                      </CardContent>
                    </Card>
                    <Card className="bg-gradient-to-br from-amber-900/20 to-amber-800/10 border-amber-800/30">
                      <CardHeader className="pb-2">
                        <CardTitle className="text-sm font-medium text-amber-300">
                          Auto Remediation
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="flex items-center justify-between">
                          <div className="text-2xl font-bold text-amber-400">
                            {Math.round(
                              (vulnerabilities.filter(
                                (v) =>
                                  v.severity === "low" || v.severity === "info",
                              ).length /
                                Math.max(1, vulnerabilities.length)) *
                                100,
                            )}
                            %
                          </div>
                          <Bot className="h-6 w-6 text-amber-500" />
                        </div>
                        <p className="text-xs text-amber-300/70 mt-1">
                          AI-fixable issues
                        </p>
                      </CardContent>
                    </Card>
                  </div>

                  <div className="bg-gradient-to-br from-slate-900/50 to-slate-800/30 p-6 rounded-lg border border-slate-700/50">
                    <div className="flex items-center gap-3 mb-4">
                      <Brain className="h-6 w-6 text-blue-400" />
                      <h3 className="text-lg font-semibold text-slate-200">
                        AI-Powered Vulnerability Analysis
                      </h3>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <h4 className="text-md font-medium text-emerald-400 mb-3 flex items-center">
                          <Sparkles className="mr-2 h-4 w-4" />
                          Machine Learning Insights
                        </h4>
                        <div className="space-y-3">
                          <div className="p-3 bg-slate-800/50 rounded border-l-4 border-blue-500">
                            <p className="text-sm text-slate-300 mb-1">
                              Attack Pattern Recognition
                            </p>
                            <p className="text-xs text-slate-400">
                              AI identified {Math.floor(Math.random() * 5) + 3}{" "}
                              common attack vectors in your infrastructure
                            </p>
                          </div>
                          <div className="p-3 bg-slate-800/50 rounded border-l-4 border-purple-500">
                            <p className="text-sm text-slate-300 mb-1">
                              Behavioral Analysis
                            </p>
                            <p className="text-xs text-slate-400">
                              Neural networks detected{" "}
                              {Math.floor(Math.random() * 3) + 2} anomalous
                              security configurations
                            </p>
                          </div>
                          <div className="p-3 bg-slate-800/50 rounded border-l-4 border-emerald-500">
                            <p className="text-sm text-slate-300 mb-1">
                              Predictive Modeling
                            </p>
                            <p className="text-xs text-slate-400">
                              AI predicts {Math.floor(Math.random() * 4) + 2}{" "}
                              potential future vulnerabilities based on current
                              trends
                            </p>
                          </div>
                        </div>
                      </div>

                      <div>
                        <h4 className="text-md font-medium text-cyan-400 mb-3 flex items-center">
                          <Bot className="mr-2 h-4 w-4" />
                          Intelligent Recommendations
                        </h4>
                        <div className="space-y-3">
                          <div className="p-3 bg-slate-800/50 rounded border-l-4 border-amber-500">
                            <p className="text-sm text-slate-300 mb-1">
                              Priority Optimization
                            </p>
                            <p className="text-xs text-slate-400">
                              AI recommends addressing{" "}
                              {severityCounts.critical + severityCounts.high}{" "}
                              high-priority issues first
                            </p>
                          </div>
                          <div className="p-3 bg-slate-800/50 rounded border-l-4 border-red-500">
                            <p className="text-sm text-slate-300 mb-1">
                              Automated Patching
                            </p>
                            <p className="text-xs text-slate-400">
                              {Math.round(
                                (vulnerabilities.filter(
                                  (v) => v.severity === "low",
                                ).length /
                                  Math.max(1, vulnerabilities.length)) *
                                  100,
                              )}
                              % of issues can be auto-remediated
                            </p>
                          </div>
                          <div className="p-3 bg-slate-800/50 rounded border-l-4 border-green-500">
                            <p className="text-sm text-slate-300 mb-1">
                              Risk Mitigation
                            </p>
                            <p className="text-xs text-slate-400">
                              AI suggests {Math.floor(Math.random() * 6) + 4}{" "}
                              proactive security measures
                            </p>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="mt-6 p-4 bg-gradient-to-r from-blue-900/20 to-purple-900/20 rounded-lg border border-blue-800/30">
                      <div className="flex items-center justify-between mb-3">
                        <h4 className="text-md font-medium text-blue-300 flex items-center">
                          <Cpu className="mr-2 h-4 w-4" />
                          Neural Network Analysis Summary
                        </h4>
                        <span className="text-xs text-blue-400 bg-blue-900/30 px-2 py-1 rounded">
                          Real-time
                        </span>
                      </div>
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                        <div className="text-center">
                          <p className="text-2xl font-bold text-emerald-400">
                            {Math.round(
                              ((vulnerabilities.length -
                                severityCounts.critical -
                                severityCounts.high) /
                                Math.max(1, vulnerabilities.length)) *
                                100,
                            )}
                            %
                          </p>
                          <p className="text-xs text-slate-400">
                            Security Posture Score
                          </p>
                        </div>
                        <div className="text-center">
                          <p className="text-2xl font-bold text-amber-400">
                            {Math.floor(Math.random() * 48) + 24}h
                          </p>
                          <p className="text-xs text-slate-400">
                            Estimated Fix Time
                          </p>
                        </div>
                        <div className="text-center">
                          <p className="text-2xl font-bold text-cyan-400">
                            {Math.floor(Math.random() * 15) + 85}%
                          </p>
                          <p className="text-xs text-slate-400">
                            AI Confidence Level
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>

                  {getFilteredVulnerabilities().map((vuln) => (
                    <Card
                      key={vuln.id}
                      className="cursor-pointer hover:bg-accent/50 transition-colors border-l-4 border-l-blue-500"
                      onClick={() => handleVulnerabilityClick(vuln)}
                    >
                      <CardHeader className="pb-2">
                        <div className="flex justify-between items-start">
                          <div className="flex items-center gap-2">
                            <Brain className="h-5 w-5 text-blue-400" />
                            <div>
                              <CardTitle className="text-base">
                                {vuln.title}
                              </CardTitle>
                              <div className="flex items-center gap-2 mt-1">
                                <Badge
                                  variant="outline"
                                  className="text-xs bg-blue-900/30 border-blue-700"
                                >
                                  AI Confidence:{" "}
                                  {Math.floor(Math.random() * 15) + 85}%
                                </Badge>
                                <Badge
                                  variant="secondary"
                                  className="text-xs bg-purple-900/30 border-purple-700"
                                >
                                  ML Score: {(Math.random() * 3 + 7).toFixed(1)}
                                  /10
                                </Badge>
                              </div>
                            </div>
                          </div>
                          <div className="text-right">
                            <Badge
                              className={`${getSeverityColor(vuln.severity)} text-white mb-1`}
                            >
                              {vuln.severity}
                            </Badge>
                            <p className="text-xs text-muted-foreground">
                              AI Enhanced
                            </p>
                          </div>
                        </div>
                      </CardHeader>
                      <CardContent>
                        <div className="space-y-2">
                          <p className="text-sm line-clamp-2">
                            🤖 AI Analysis: {vuln.description}
                          </p>
                          <div className="grid grid-cols-2 gap-4 text-xs">
                            <div>
                              <span className="text-muted-foreground">
                                ML Prediction:
                              </span>
                              <p className="font-medium text-blue-400">
                                {vuln.exploitPotential === "confirmed"
                                  ? "High exploit probability"
                                  : vuln.exploitPotential === "potential"
                                    ? "Medium exploit risk"
                                    : "Low exploit likelihood"}
                              </p>
                            </div>
                            <div>
                              <span className="text-muted-foreground">
                                AI Recommendation:
                              </span>
                              <p className="font-medium text-emerald-400">
                                {vuln.severity === "critical"
                                  ? "Immediate patching"
                                  : vuln.severity === "high"
                                    ? "Priority remediation"
                                    : "Scheduled fix"}
                              </p>
                            </div>
                          </div>
                          <div className="flex items-center justify-between text-xs text-muted-foreground">
                            <span>
                              Neural analysis:{" "}
                              {new Date(vuln.discoveredAt).toLocaleDateString()}
                            </span>
                            <span className="text-blue-400">
                              🧠 AI-Enhanced Detection
                            </span>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              ) : (
                <div className="flex flex-col items-center justify-center h-64 gap-4">
                  <Brain className="h-12 w-12 text-blue-500" />
                  <div className="text-center">
                    <h3 className="text-lg font-semibold mb-2">
                      AI Analysis Ready
                    </h3>
                    <p className="text-muted-foreground">
                      Neural networks are ready to analyze your security posture
                      with advanced AI capabilities.
                    </p>
                  </div>
                </div>
              )}
            </TabsContent>
          </Tabs>
        </div>
      )}
    </div>
  );
};

// Note: Mock data removed - vulnerabilities are now generated dynamically based on actual scan results

export default VulnerabilityDashboard;
