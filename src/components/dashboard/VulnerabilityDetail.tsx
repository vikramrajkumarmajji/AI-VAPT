import React from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Separator } from "@/components/ui/separator";
import {
  AlertCircle,
  CheckCircle2,
  Copy,
  ExternalLink,
  FileText,
  Shield,
  Terminal,
} from "lucide-react";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";

interface VulnerabilityDetailProps {
  vulnerability?: {
    id: string;
    name: string;
    description: string;
    severity: "critical" | "high" | "medium" | "low" | "info";
    cve?: string;
    cvss?: number;
    discoveredAt: string;
    status: "open" | "in-progress" | "resolved" | "false-positive";
    affectedComponents: string[];
    exploitPotential: "easy" | "moderate" | "difficult";
    remediation: string;
    technicalDetails: string;
    references: { title: string; url: string }[];
    proofOfConcept?: string;
    pocScreenshot?: string;
    endpointUrl?: string;
  };
}

const getSeverityColor = (severity: string) => {
  switch (severity) {
    case "critical":
      return "bg-red-500 hover:bg-red-600";
    case "high":
      return "bg-orange-500 hover:bg-orange-600";
    case "medium":
      return "bg-yellow-500 hover:bg-yellow-600";
    case "low":
      return "bg-blue-500 hover:bg-blue-600";
    case "info":
      return "bg-slate-500 hover:bg-slate-600";
    default:
      return "bg-slate-500 hover:bg-slate-600";
  }
};

const getExploitColor = (potential: string) => {
  switch (potential) {
    case "easy":
      return "bg-red-500 hover:bg-red-600";
    case "moderate":
      return "bg-yellow-500 hover:bg-yellow-600";
    case "difficult":
      return "bg-blue-500 hover:bg-blue-600";
    default:
      return "bg-slate-500 hover:bg-slate-600";
  }
};

const getStatusColor = (status: string) => {
  switch (status) {
    case "open":
      return "bg-red-500 hover:bg-red-600";
    case "in-progress":
      return "bg-yellow-500 hover:bg-yellow-600";
    case "resolved":
      return "bg-green-500 hover:bg-green-600";
    case "false-positive":
      return "bg-slate-500 hover:bg-slate-600";
    default:
      return "bg-slate-500 hover:bg-slate-600";
  }
};

const VulnerabilityDetail: React.FC<VulnerabilityDetailProps> = ({
  vulnerability = {
    id: "VUL-2023-0001",
    name: "SQL Injection in Authentication Endpoint",
    description:
      "A SQL injection vulnerability was discovered in the authentication endpoint that could allow attackers to bypass authentication or extract sensitive data from the database.",
    severity: "critical",
    cve: "CVE-2023-1234",
    cvss: 9.8,
    discoveredAt: "2023-06-15T14:30:00Z",
    status: "open",
    affectedComponents: ["Authentication Service", "User Database"],
    exploitPotential: "easy",
    remediation:
      "Implement prepared statements for all database queries. Validate and sanitize all user inputs. Apply the principle of least privilege for database connections.",
    technicalDetails:
      "The vulnerability exists in the login.php file where user input is directly concatenated into SQL queries without proper sanitization. By injecting malicious SQL code in the username field, an attacker can manipulate the query logic to bypass authentication checks.",
    references: [
      {
        title: "OWASP SQL Injection Prevention Cheat Sheet",
        url: "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html",
      },
      {
        title: "CWE-89: SQL Injection",
        url: "https://cwe.mitre.org/data/definitions/89.html",
      },
    ],
    proofOfConcept: "username=admin'--&password=anything",
    pocScreenshot:
      "https://images.unsplash.com/photo-1629654297299-c8506221ca97?w=800&q=80",
    endpointUrl: "https://target-app.com/api/login",
  },
}) => {
  return (
    <Card className="w-full bg-slate-900 border-slate-700 text-slate-100">
      <CardHeader>
        <div className="flex justify-between items-start">
          <div>
            <CardTitle className="text-xl font-bold">
              {vulnerability.name}
            </CardTitle>
            <CardDescription className="text-slate-400 mt-1">
              ID: {vulnerability.id}{" "}
              {vulnerability.cve && `| ${vulnerability.cve}`}
            </CardDescription>
          </div>
          <div className="flex gap-2">
            <Badge className={`${getSeverityColor(vulnerability.severity)}`}>
              {vulnerability.severity.toUpperCase()}
            </Badge>
            <Badge className={`${getStatusColor(vulnerability.status)}`}>
              {vulnerability.status.replace("-", " ").toUpperCase()}
            </Badge>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="overview" className="w-full">
          <TabsList className="bg-slate-800 border-slate-700">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="technical">Technical Details</TabsTrigger>
            <TabsTrigger value="remediation">Remediation</TabsTrigger>
            <TabsTrigger value="references">References</TabsTrigger>
          </TabsList>

          <TabsContent value="overview" className="mt-4">
            <div className="space-y-4">
              <div>
                <h3 className="text-sm font-medium text-slate-400">
                  Description
                </h3>
                <p className="mt-1 text-slate-200">
                  {vulnerability.description}
                </p>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <h3 className="text-sm font-medium text-slate-400">
                    Severity Details
                  </h3>
                  <div className="mt-2 p-3 bg-slate-800 rounded-md">
                    <div className="flex justify-between">
                      <span className="text-slate-300">CVSS Score:</span>
                      <span className="font-medium text-slate-100">
                        {vulnerability.cvss}
                      </span>
                    </div>
                    <div className="flex justify-between mt-2">
                      <span className="text-slate-300">Exploit Potential:</span>
                      <Badge
                        className={`${getExploitColor(vulnerability.exploitPotential)}`}
                      >
                        {vulnerability.exploitPotential.toUpperCase()}
                      </Badge>
                    </div>
                    <div className="flex justify-between mt-2">
                      <span className="text-slate-300">Discovered:</span>
                      <span className="font-medium text-slate-100">
                        {new Date(
                          vulnerability.discoveredAt,
                        ).toLocaleDateString()}
                      </span>
                    </div>
                  </div>
                </div>

                <div>
                  <h3 className="text-sm font-medium text-slate-400">
                    Affected Components
                  </h3>
                  <div className="mt-2 p-3 bg-slate-800 rounded-md">
                    <ul className="space-y-1">
                      {vulnerability.affectedComponents.map(
                        (component, index) => (
                          <li key={index} className="flex items-center">
                            <AlertCircle className="h-4 w-4 text-red-500 mr-2" />
                            <span className="text-slate-200">{component}</span>
                          </li>
                        ),
                      )}
                    </ul>
                  </div>
                </div>
              </div>
            </div>
          </TabsContent>

          <TabsContent value="technical" className="mt-4 space-y-4">
            <div>
              <h3 className="text-sm font-medium text-slate-400">
                Technical Analysis
              </h3>
              <div className="mt-2 p-4 bg-slate-800 rounded-md">
                <p className="text-slate-200 whitespace-pre-line">
                  {vulnerability.technicalDetails}
                </p>
              </div>
            </div>

            {vulnerability.endpointUrl && (
              <div>
                <h3 className="text-sm font-medium text-slate-400 flex items-center">
                  <ExternalLink className="h-4 w-4 mr-2" />
                  Vulnerable Endpoint
                </h3>
                <div className="mt-2 relative">
                  <div className="p-4 bg-red-900/20 border border-red-700/50 rounded-md font-mono text-sm text-red-300 overflow-x-auto">
                    {vulnerability.endpointUrl}
                  </div>
                  <div className="flex gap-2 mt-2">
                    <Button
                      variant="ghost"
                      size="sm"
                      className="h-8 px-3 text-slate-400 hover:text-slate-100 hover:bg-slate-700"
                      onClick={() =>
                        navigator.clipboard.writeText(
                          vulnerability.endpointUrl || "",
                        )
                      }
                    >
                      <Copy className="h-4 w-4 mr-1" />
                      Copy URL
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      className="h-8 px-3 text-slate-400 hover:text-slate-100 hover:bg-slate-700"
                      onClick={() =>
                        window.open(vulnerability.endpointUrl, "_blank")
                      }
                    >
                      <ExternalLink className="h-4 w-4 mr-1" />
                      Open
                    </Button>
                  </div>
                </div>
              </div>
            )}

            {vulnerability.proofOfConcept && (
              <div>
                <h3 className="text-sm font-medium text-slate-400">
                  Proof of Concept
                </h3>
                <div className="mt-2 relative">
                  <div className="p-4 bg-slate-800 rounded-md font-mono text-sm text-slate-200 overflow-x-auto">
                    {vulnerability.proofOfConcept}
                  </div>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="absolute top-2 right-2 h-8 w-8 p-0 text-slate-400 hover:text-slate-100 hover:bg-slate-700"
                    onClick={() =>
                      navigator.clipboard.writeText(
                        vulnerability.proofOfConcept || "",
                      )
                    }
                  >
                    <Copy className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            )}

            {vulnerability.pocScreenshot && (
              <div>
                <h3 className="text-sm font-medium text-slate-400 flex items-center">
                  <FileText className="h-4 w-4 mr-2" />
                  Proof of Concept Evidence
                </h3>
                <div className="mt-2">
                  <div className="relative group">
                    <img
                      src={vulnerability.pocScreenshot}
                      alt="Proof of Concept Screenshot"
                      className="w-full max-w-2xl rounded-md border border-red-700/50 shadow-lg hover:shadow-xl transition-shadow cursor-pointer"
                      onClick={() =>
                        window.open(vulnerability.pocScreenshot, "_blank")
                      }
                    />
                    <div className="absolute inset-0 bg-black/0 group-hover:bg-black/10 transition-colors rounded-md flex items-center justify-center opacity-0 group-hover:opacity-100">
                      <div className="bg-black/70 text-white px-3 py-1 rounded text-sm">
                        Click to view full size
                      </div>
                    </div>
                  </div>
                  <div className="mt-3 p-3 bg-red-900/20 border border-red-700/30 rounded">
                    <p className="text-xs text-red-300 font-medium mb-1">
                      🔍 Evidence Details:
                    </p>
                    <p className="text-xs text-slate-400">
                      Screenshot captured during vulnerability assessment
                      showing successful exploitation of the{" "}
                      {vulnerability.name.toLowerCase()}. This visual proof
                      demonstrates the security flaw and its potential impact on
                      the target system.
                    </p>
                    <div className="flex gap-2 mt-2">
                      <Button
                        variant="ghost"
                        size="sm"
                        className="h-7 px-2 text-xs text-slate-400 hover:text-slate-100 hover:bg-slate-700"
                        onClick={() =>
                          window.open(vulnerability.pocScreenshot, "_blank")
                        }
                      >
                        <ExternalLink className="h-3 w-3 mr-1" />
                        View Full Size
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        className="h-7 px-2 text-xs text-slate-400 hover:text-slate-100 hover:bg-slate-700"
                        onClick={() => {
                          const link = document.createElement("a");
                          link.href = vulnerability.pocScreenshot || "";
                          link.download = `poc_${vulnerability.id}_screenshot.jpg`;
                          link.click();
                        }}
                      >
                        <FileText className="h-3 w-3 mr-1" />
                        Download
                      </Button>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </TabsContent>

          <TabsContent value="remediation" className="mt-4">
            <div>
              <h3 className="text-sm font-medium text-slate-400">
                Recommended Actions
              </h3>
              <div className="mt-2 p-4 bg-slate-800 rounded-md">
                <p className="text-slate-200 whitespace-pre-line">
                  {vulnerability.remediation}
                </p>
              </div>

              <Accordion type="single" collapsible className="mt-4">
                <AccordionItem value="checklist" className="border-slate-700">
                  <AccordionTrigger className="text-slate-200 hover:text-slate-100 hover:no-underline">
                    Remediation Checklist
                  </AccordionTrigger>
                  <AccordionContent>
                    <div className="space-y-2 pl-2">
                      {vulnerability.remediation
                        .split(".")
                        .filter((item) => item.trim())
                        .map((item, index) => (
                          <div key={index} className="flex items-start">
                            <div className="h-5 w-5 rounded-full border border-green-500 flex items-center justify-center mr-2 mt-0.5">
                              <CheckCircle2 className="h-3 w-3 text-green-500" />
                            </div>
                            <span className="text-slate-300">
                              {item.trim()}.
                            </span>
                          </div>
                        ))}
                    </div>
                  </AccordionContent>
                </AccordionItem>
              </Accordion>
            </div>
          </TabsContent>

          <TabsContent value="references" className="mt-4">
            <div>
              <h3 className="text-sm font-medium text-slate-400">
                External References
              </h3>
              <div className="mt-2 space-y-2">
                {vulnerability.references.map((reference, index) => (
                  <a
                    key={index}
                    href={reference.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="flex items-center p-3 bg-slate-800 rounded-md hover:bg-slate-700 transition-colors"
                  >
                    <FileText className="h-5 w-5 text-blue-400 mr-2" />
                    <span className="text-slate-200 flex-1">
                      {reference.title}
                    </span>
                    <ExternalLink className="h-4 w-4 text-slate-400" />
                  </a>
                ))}
              </div>
            </div>
          </TabsContent>
        </Tabs>
      </CardContent>
      <Separator className="bg-slate-700" />
      <CardFooter className="flex justify-between pt-4">
        <div className="flex items-center text-sm text-slate-400">
          <Shield className="h-4 w-4 mr-1" />
          <span>
            Last updated:{" "}
            {new Date(vulnerability.discoveredAt).toLocaleString()}
          </span>
        </div>
        <div className="flex gap-2">
          <Button
            variant="outline"
            className="border-slate-700 text-slate-200 hover:bg-slate-700 hover:text-slate-100"
          >
            <Terminal className="h-4 w-4 mr-2" />
            Generate Fix
          </Button>
          <Button className="bg-blue-600 hover:bg-blue-700 text-white">
            Mark as Resolved
          </Button>
        </div>
      </CardFooter>
    </Card>
  );
};

export default VulnerabilityDetail;
